import { protectedProcedure, router } from "../trpc"; // üëà –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–≤–æ–π protectedProcedure
import { TRPCError } from "@trpc/server";
import { authenticator } from "otplib";
import qrcode from "qrcode";
import { z } from "zod";

export const twoFARouter = router({
  enable2FA: protectedProcedure
    .input(
      z.object({
        method: z.enum(["qr", "manual", "email", "sms"]),
      })
    )
    .mutation(async ({ input, ctx }) => {
      const userId = ctx.session.user.id;
      const email = ctx.session.user.email;
      const secret = authenticator.generateSecret();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–µ—Ç–æ–¥–∞
      await ctx.prisma.user.update({
        where: { id: userId },
        data: { twoFactorSecret: secret, twoFactorEnabled: false },
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º otpauth —Å—Å—ã–ª–∫—É
      const otpauth = authenticator.keyuri(email, "MyApp", secret);

      switch (input.method) {
        case "qr": {
          const qrCode = await qrcode.toDataURL(otpauth);
          return {
            method: "qr",
            qrCode,
          };
        }

        case "manual": {
          return {
            method: "manual",
            secret,
          };
        }

        case "email": {
          const token = authenticator.generate(secret); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
          // —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Resend/SendGrid/etc
          await ctx.sendEmail({
            to: email,
            subject: "–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA",
            html: `<p>–í–∞—à –∫–æ–¥: <b>${token}</b></p>`,
          });

          return {
            method: "email",
            message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.",
          };
        }

        /*case "sms": {
          const phone = ctx.session.user.phone;
          if (!phone) {
            throw new TRPCError({ code: "BAD_REQUEST", message: "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω." });
          }

          const token = authenticator.generate(secret);
          // —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Twilio/SMSClub/etc
          await ctx.sendSMS({
            to: phone,
            body: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${token}`,
          });

          return {
            method: "sms",
            message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ SMS.",
          };
        }
*/
        default:
          throw new TRPCError({ code: "BAD_REQUEST", message: "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥." });
      }
    }),

  confirm2FASetup: protectedProcedure
    .input(z.object({ code: z.string().min(6).max(6) }))
    .mutation(async ({ input, ctx }) => {
      const user = await ctx.prisma.user.findUnique({
        where: { id: ctx.session.user.id },
      });

      if (!user?.twoFactorSecret) {
        throw new TRPCError({ code: "BAD_REQUEST", message: "–°–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω." });
      }

      const isValid = authenticator.verify({
        token: input.code,
        secret: user.twoFactorSecret,
      });

      if (!isValid) {
        throw new TRPCError({ code: "BAD_REQUEST", message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥." });
      }

      await ctx.prisma.user.update({
        where: { id: user.id },
        data: { twoFactorEnabled: true },
      });

      return { message: "2FA —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ!" };
    }),
});
